package org.obicere.cc.util;

import java.util.Objects;
import java.util.Random;

/**
 * @author Obicere
 * @version 1.0
 */
public class SimpleRandom extends Random {

    /**
     * Returns a pseudo-random integer. The bounds depend on the values for
     * <code>a</code> and <code>b</code>.
     * <p>
     * The bound is defined as:
     * <pre>
     * if a = b: [a, a]
     * if a < b: [a, b)
     * if a > b: [b, a)
     * </pre>
     * <p>
     * So note should <code>a=3</code>, <code>b=5</code>, then the possible
     * values are:
     * <p>
     * <code>[3, 4]</code>
     * <p>
     * However if we have <code>a=2</code>, <code>b=2</code>, then the
     * possible values are:
     * <p>
     * <code>[2]</code>
     * <p>
     * As opposed to throwing an error.
     * <p>
     * This also guarantees that a value will always be returned and a
     * {@link java.lang.RuntimeException} is not possible during
     * operation.
     *
     * @param a One of the inclusive bounds for the range.
     * @param b The potentially exclusive bound for the range.
     * @return A given random value within the range.
     */

    public int nextInt(final int a, final int b) {
        final int min = Math.min(a, b);
        final int max = Math.max(a, b);
        return min + (max == min ? 0 : nextInt(max - min));
    }

    /**
     * Retrieves a pseudo-random character from the given {@link
     * CharacterGroup}. No returned value is guaranteed, as
     * the generation is handled by the set itself. This method merely
     * provides a walk-around solution for creating a new seed.
     *
     * @param set The set to pull a pseudo-random character from.
     * @return A given character, generated by the character set.
     * @throws java.lang.NullPointerException if the given <code>set</code>
     *                                        is <code>null</code>.
     * @see CharacterGroup
     * @see CharacterGroup#nextChar(java.util.Random)
     */

    public char nextChar(final CharacterGroup set) {
        Objects.requireNonNull(set);
        return set.nextChar(this);
    }

    /**
     * Creates a new randomized {@link java.lang.String} from characters in
     * the given {@link CharacterGroup}. Certain patterns and
     * otherwise language-based characteristics are not generated. So this
     * does not function as generating random words, sentences or names.
     *
     * @param length The length of the {@link java.lang.String} to
     *               generate.
     * @param set    The set to pull a pseudo-random character from.
     * @return The generated length of size: <code>length</code>.
     * @throws java.lang.IllegalArgumentException if <code>length <
     *                                            0</code>.
     * @throws java.lang.NullPointerException     if the given <code>set</code>
     *                                            is <code>null</code>.
     * @see CharacterGroup#nextChar(java.util.Random)
     */

    public String nextString(final int length, final CharacterGroup set) {
        if (length < 0) {
            throw new IllegalArgumentException("Length must be greater than or equal to 0. Length: " + length);
        }
        if (length == 0) {
            return "";
        }
        Objects.requireNonNull(set);
        final StringBuilder builder = new StringBuilder(length);
        for (int i = 0; i < length; i++) {
            builder.append(set.nextChar(this));
        }
        return builder.toString();
    }

    /**
     * A remote sensor is hooked up to a vacuum to monitor fluctuations.
     * These numbers are then stored to a database for each independent
     * client. Each client must first register itself to the database to be
     * able to receive truly random numbers.
     * <p>
     * This works on the premise that the vacuum is not a space empty of
     * matter or photons. But, as a space of virtual particles appearing
     * and disappearing every instant. This can happen since the vacuum
     * still possesses a zero-point energy. Monitoring the electromagnetic
     * fields of the vacuum, you can see random fluctuations in phase and
     * amplitude. Relaying this information to the database, we have a list
     * of quantum random numbers.
     * <p>
     * You wanted random - here it is. God is rolling dice now.
     *
     * @return A truly random number.
     * @since 1.0
     */

    public int nextQuantumInt() {
        return 4;
    }
}
