package org.obicere.cc.executor;

import java.util.Arrays;
import java.util.Objects;

/**
 * The result of an invocation on a specific case. That case produced a
 * single value, seen as the answer. This result also can be seen as having
 * a 'correctness' value, based on whether or not the answer given from the
 * case is the same as the answer given from the invocation.
 * <p>
 * This is used to test the correctness of the program the user generated
 * to fit the problem.
 *
 * @author Obicere
 * @version 1.0
 */

public class Result {

    public static final String TIMED_OUT = "Timed out...";

    public static final String ERROR = "Error";

    private final Object   result;
    private final Object   expectedResult;
    private final Object[] parameters;

    /**
     * Constructs a new result from a specified {@link
     * org.obicere.cc.executor.Case} and the given result from the
     * invocation.
     *
     * @param result The result from the invocation.
     * @param cas    The case used to generate the <code>result</code>.
     */

    public Result(final Object result, final Case cas) {
        Objects.requireNonNull(cas);
        this.result = result;
        this.expectedResult = cas.getExpectedResult();
        this.parameters = cas.getParameters();
    }

    /**
     * The result generated by the user and his/her program. This is set by
     * the result of the invocation. This is also the sole difference
     * between the {@link org.obicere.cc.executor.Case} and the {@link
     * org.obicere.cc.executor.Result}.
     *
     * @return The result from the invocation.
     */

    public Object getResult() {
        return result;
    }

    /**
     * Retrieves the correct answer, as generated by the {@link
     * org.obicere.cc.projects.Runner}.
     *
     * @return The expected result.
     */

    public Object getExpectedResult() {
        return expectedResult;
    }

    /**
     * Retrieves the parameters passed into a function to produce the
     * expected result.
     *
     * @return The parameters used to generate the expected result.
     */

    public Object[] getParameters() {
        return parameters;
    }

    /**
     * Checks to see if the given result is indeed correct. This is done by
     * checking the equality of the expected result and the given result.
     *
     * @return <code>true</code> if and only if this result would be deemed
     * as correct.
     */

    public boolean isCorrect() {
        if (result == null) {
            return expectedResult == null;
        }
        if (result.getClass().isArray()) {
            return Arrays.deepEquals(new Object[]{result}, new Object[]{expectedResult});
        }
        return result.equals(expectedResult);
    }

    /**
     * Constructs a new {@link org.obicere.cc.executor.Result} signalling
     * that the given {@link org.obicere.cc.executor.Case} was never
     * completed, due to the program's time-out contract.
     *
     * @param cas The unused case.
     * @return The new result signalling a timing error.
     */

    public static Result newTimedOutResult(final Case cas) {
        return new Result(TIMED_OUT, cas);
    }

    /**
     * Constructs a new {@link org.obicere.cc.executor.Result} signalling
     * that the given {@link org.obicere.cc.executor.Case} resulted in an
     * error in the user's program. Such error is not held within the
     * result, but is instead printed to the console.
     *
     * @param cas The failed case.
     * @return The new result signalling a runtime error.
     */

    public static Result newErrorResult(final Case cas) {
        return new Result(ERROR, cas);
    }

}
